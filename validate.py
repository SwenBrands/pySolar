#!/usr/bin/env python

'''Compares radiation data from ERA5-Land or other alternative datasets against AEMET station data previously converted to netCDF with csv2nc.py, the latter script being located in the same directory.
Author: Swen Brands, brandssf@ifca.unican.es
'''

#load packages
import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cf
import os
import pandas as pd
exec(open('functions_radiation.py').read())

#set input parameters
home = os.getenv('HOME')
rundir = home+'/datos/tareas/proyectos/pticlima/pyPTIclima/radiation' #script directory, you should be there or point to this directory when running these scripts via python
dir_obs = home+'/datos/tareas/proyectos/pticlima/radiation/netcdf' #path to input netcdf files produced with csv2nc.py containg AEMET station data.
filename_obs = 'rsds_day_aemet_20171201_20221231.nc'
dir_rean = home+'/datos/OBSData/era5_land' #path to reanalysis data used for comparison; base directory structure similar to data, will be expanded as a function of the target area (Spain or Canaries) and year
#dir_rean = home+'/datos/OBSData/era5_land/day/ssrd/2022'
dir_figs = home+'/datos/tareas/proyectos/pticlima/radiation/figs/validation' #path to output figures file generated by this script
taryears = [2017,2022] #start and end years used for validation
variable = 'ssrd' #variable names are harmonized to ERA5 standard by csv2nc.py

precision = 'float32' #precision of the variable in the output netCDF files
dpival = 300 #resultion of the output figure in dpi
figformat = 'pdf' #format of the output figures: pdf, png, etc.
colormap = 'Spectral_r'

##EXECUTE ##############################################################
years = np.arange(taryears[0],taryears[1]+1)

#get list of full paths of nc dataset to be tested; sp = Spain, ca = Canaries
listdir_sp_raw = []
listdir_ca_raw = []
for yy in np.arange(len(years)):
    root_year_sp = dir_rean+'/Spain/day/'+variable+'/'+str(years[yy])
    root_year_ca = dir_rean+'/Canaries/day/'+variable+'/'+str(years[yy])

    listdir_year_sp = os.listdir(root_year_sp)
    listdir_year_ca = os.listdir(root_year_ca) #sp = Spain, ca = Canaries
    
    listdir_year_sp_full = [root_year_sp+'/'+listdir_year_sp[ii] for ii in np.arange(len(listdir_year_sp))]
    listdir_year_ca_full = [root_year_ca+'/'+listdir_year_ca[ii] for ii in np.arange(len(listdir_year_ca))]
    
    listdir_sp_raw = np.append(listdir_sp_raw,listdir_year_sp_full,axis=0)
    listdir_ca_raw = np.append(listdir_ca_raw,listdir_year_ca_full,axis=0)

#remove all detected files that are not nc format from the lists to be loaded, just in case someone put other files into the directory
dropind_sp = []
for ff in list(range(len(listdir_sp_raw))):
    if listdir_sp_raw[ff][-3:] != '.nc':
        dropind_sp.append(ff)
dropind_ca = []
for ff in list(range(len(listdir_ca_raw))):
    if listdir_ca_raw[ff][-3:] != '.nc':
        dropind_ca.append(ff)

#delete non nc files from the lists and sort the individual filenames in ascending temporal order
listdir_sp = sorted(np.delete(listdir_sp_raw,dropind_sp).tolist())
listdir_ca = sorted(np.delete(listdir_ca_raw,dropind_ca).tolist())

#load the two file multiple-file as two separate xr Datasets using xr.open_mfdataset()
print('The following files will be loaded for the Spain domain:')
print(listdir_sp)
print('The following files will be loaded for the Canaries domain:')
print(listdir_ca)
#nc_sp = xr.open_mfdataset(listdir_sp,concat_dim = 'time',combine='nested')
#nc_ca = xr.open_mfdataset(listdir_ca,concat_dim = 'time',combine='nested')
nc_sp = xr.open_mfdataset(listdir_sp)
nc_ca = xr.open_mfdataset(listdir_ca)

#transform ERA5-Land data to from Joule/m^2 per day to W/m^2 per second, https://confluence.ecmwf.int/pages/viewpage.action?pageId=155337784
nc_sp[variable]=nc_sp[variable]/86400
nc_ca[variable]=nc_ca[variable]/86400

#load AEMET station data
obsfile = dir_obs+'/'+filename_obs
nc_obs = xr.open_dataset(obsfile)




#add full paths to each list
#listdir_sp_full = 


#construct path list of input netcdf files with data to be tested against AEMET observations


# #read the necesary columns from the csv file
# filename_csv = dir_obs + '/RadiacionDESEMON_example.csv'
# df = pd.read_csv(filename_csv, sep=';', header=0, index_col=[0], encoding='latin-1')
# years = df['AÑO'].values
# months = df['MES'].values
# days = df['DIA'].values
# dates_file = pd.DatetimeIndex([str(df['AÑO'].values[ii])+'-'+str(df['MES'].values[ii]).zfill(2)+'-'+str(df['DIA'].values[ii]).zfill(2) +'T00:00:00' for ii in np.arange(len(df))])
# #dates_unique = pd.DatetimeIndex(np.unique(dates_file))
# dates_range = pd.date_range(dates_file.min(),dates_file.max(),freq='D')

# indications = df.index.values #INDICATIVO is the index and contains the distinct station names
# aemet_code, ind_unique = np.unique(indications,return_index = True)
# aemet_code = aemet_code.tolist() # is a list of unique station identifiers / codes as provided by AEMET
# lon = df['LONGITUD'][ind_unique].values/100000
# lat = df['LATITUD'][ind_unique].values/100000
# station_name = df['NOMBRE'][ind_unique].values.tolist()
# altitude = df['ALTITUD'][ind_unique].values

# #retain the last digit in longitude values provided by AEMET, this last digit inicates degrees East (1) or degrees West (2)
# last_digit = [int(str(lon[ii])[-1]) for ii in np.arange(len(lon))]
# west_ind = np.array(last_digit) == 2 #find western hemisphere longitudes
# lon[west_ind] = lon[west_ind]*-1 #multiply westerly longitudes by -1 to get -180 to 180 format
# #remove the last digit
# lon = np.floor(lon*10000)/10000

# #init output numpy arrays to be filled
# rdirdia_out = np.zeros((len(dates_range),len(aemet_code)))
# rdirdia_out[:] = np.nan
# rdifdia_out = np.copy(rdirdia_out)
# rglodia_out = np.copy(rdirdia_out)

# #first loop browses through station identifiers (called 'INDICATIVO' in the csv file)
# for st in np.arange(len(aemet_code)):
    # #select all rows for a given station
    # df_subset = df.loc[aemet_code[st]]
    # dates_subset = pd.DatetimeIndex([str(df_subset['AÑO'].values[ii])+'-'+str(df_subset['MES'].values[ii]).zfill(2)+'-'+str(df_subset['DIA'].values[ii]).zfill(2) +'T00:00:00' for ii in np.arange(len(df_subset))])
    
    # ##correct time ordering, in the source file time ordering is upside down !
    # time_ascend_ind = np.argsort(dates_subset)
    # dates_subset = dates_subset[time_ascend_ind]
    # df_subset = df_subset.iloc[time_ascend_ind]
    
    # ##check for duplicate time instants in input csv file
    # # dupl_ind = np.where(dates_subset.duplicated())[0] #used to document the duplicated time instants at station <aemet_code[st]>
    # # if len(dupl_ind) > 0:
        # # print('WARNING: At station '+aemet_code[st]+', duplicated values have been dected in input file '+filename_csv+' on the dates listed below that will be set to nan:')
        # # print(dates_subset.values[dupl_ind])
    # # else:
        # # print('INFO: At station '+aemet_code[st]+', no duplicated values have been detected in input file '+filename_csv)
    
    # ##retain only time instants with no duplicates
    # no_dupl_ind = np.where(~dates_subset.duplicated())[0]
    # df_subset = df_subset.iloc[no_dupl_ind]
    # dates_subset = dates_subset[no_dupl_ind]
    
    # ##second loop browses through dates available for a specific station and then fills in the data at st and dd
    # for dd in np.arange(len(dates_subset)):
        # dates_subset_ind = np.where(dates_range == dates_subset[dd])[0]
        # bool_dates = np.isin(dates_range,dates_subset)
        # rdirdia_out[bool_dates,st] = df_subset['RDIRDIA'].values
        # rdifdia_out[bool_dates,st] = df_subset['RDIFDIA'].values
        # rglodia_out[bool_dates,st] = df_subset['RGLODIA'].values

# #generate xr data arrays
# rglodia_out = get_xr_arr(rglodia_out, [dates_range, np.arange(len(aemet_code))], 'rglodia', 'global downward shortwave radiation', '?', altitude, station_name, aemet_code, lat, lon)
# rdirdia_out = get_xr_arr(rdirdia_out, [dates_range, np.arange(len(aemet_code))], 'rdirdia', 'direct downward shortwave radiation', '?', altitude, station_name, aemet_code, lat, lon)
# rdifdia_out = get_xr_arr(rdifdia_out, [dates_range, np.arange(len(aemet_code))], 'rdifdia', 'diffuse downward shortwave radiation', '?', altitude, station_name, aemet_code, lat, lon)

# rsds = rglodia_out.copy().rename('rsds')
# rsds = rsds*10000/86400
# rsds = rsds.astype(precision)
# rsds.attrs['name'] = 'rsds'
# rsds.attrs['standard_name'] = 'rsds'
# rsds.attrs['long_name'] = 'surface_downwelling_shortwave_radiation'
# rsds.attrs['units'] = 'W*m-2'
# rsds.attrs['conversion_factor'] = 'rsds = RGLODIA*10000/86400'
# rsds.attrs['source'] = 'This netCDF file contains rsds time series from AEMET provided by Santiago Begueria; rsds was obtained by multiplying the original RGLODIR variable with the factor indicated in the <conversion_factor> attribute.'
# rsds.attrs['nan_percentage'] = np.isnan(rsds.values).sum(axis=0)/rsds.shape[0]*100

# #save the output netCDF files
# if os.path.isdir(dir_netcdf) != True:
    # os.makedirs(dir_netcdf)

# start_time = str(dates_range.min()).replace('-','').replace(' ','').replace(':','')[0:-6]
# end_time = str(dates_range.max()).replace('-','').replace(' ','').replace(':','')[0:-6]
# savename_rsds = dir_netcdf+'/rsds_day_aemet_'+start_time+'_'+end_time+'.nc'
# rsds.to_netcdf(savename_rsds)

# ##plot the matrix of daily files (time x location)
# fig = plt.figure()
# ax = rsds.plot.pcolormesh(cmap = colormap, x = 'time', y = 'location', vmin = rsds.min(), vmax = rsds.max(), add_colorbar=False)
# ax.axes.set_yticks(rsds.location.values)
# ax.axes.set_yticklabels(station_name,fontsize=2)
# plt.xticks(fontsize=5)
# plt.xlabel(None)
# cbar = plt.colorbar(ax,shrink=0.5,label=rsds.name + ' ('+rsds.units+')')
# if figformat == 'pdf': #needed to account for irregular behaviour with the alpha parameter when plotting a pdf file
    # fig.set_rasterized(True)
# savename = dir_figs+'/rsds_day_aemet_coverage_'+start_time+'_'+end_time+'.'+figformat
# plt.savefig(savename,dpi=dpival)
# plt.close('all')

# rsds.close()

print('INFO: validate.py has been run successfully !')
